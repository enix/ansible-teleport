sudo: required
language: python
services: docker

env:
  matrix:
    # - distribution: Ubuntu
    #   distribution_version: xenial
    #   init: /lib/systemd/systemd
    #   run_opts: "--privileged --volume=/sys/fs/cgroup:/sys/fs/cgroup:ro"
    # - distribution: Ubuntu
    #   distribution_version: trusty
    #   init: /sbin/init
    #   run_opts: ""
    # - distribution: EL
    #   distribution_version: "7"
    #   init: /usr/lib/systemd/systemd
    #   run_opts: "--privileged --volume=/sys/fs/cgroup:/sys/fs/cgroup:ro"
    # - distribution: EL
    #   distribution_version: "6"
    #   init: /sbin/init
    #   run_opts: ""
    # - distribution: Debian
    #   distribution_version: stretch
    #   init: /lib/systemd/systemd
    #   run_opts: "--privileged --volume=/sys/fs/cgroup:/sys/fs/cgroup:ro"
    # - distribution: Debian
    #   distribution_version: jessie
    #   init: /lib/systemd/systemd
    #   run_opts: "--privileged --volume=/sys/fs/cgroup:/sys/fs/cgroup:ro"
    # - distribution: Debian
    #   distribution_version: wheezy
    #   init: /sbin/init
    #   run_opts: ""
    # - distribution: Fedora
    #   distribution_version: "24"
    #   init: /usr/lib/systemd/systemd
    #   run_opts: "--privileged --volume=/sys/fs/cgroup:/sys/fs/cgroup:ro"
    # - distribution: Fedora
    #   distribution_version: "23"
    #   init: /usr/lib/systemd/systemd
    #   run_opts: "--privileged --volume=/sys/fs/cgroup:/sys/fs/cgroup:ro"


before_install:
  # Pull container from Docker Hub.
  - 'docker pull ansiblecheck/ansiblecheck:${distribution,,}-${distribution_version}'

script:
  - container_id=$(mktemp)
  # Start The Built Container In The Background
  - 'docker run --detach --volume="${PWD}":/etc/ansible/roles/role_under_test:ro ${run_opts} ansiblecheck/ansiblecheck:"${distribution,,}"-"${distribution_version}" "${init}" > "${container_id}"'

  # Ansible version check.
  - 'docker exec --tty "$(cat ${container_id})" env ANSIBLE_FORCE_COLOR=true ansible --version'

  # Run linters, does not fail the job in case of errors
  - 'docker exec --tty "$(cat ${container_id})" env TERM=xterm ansible-lint -c /etc/ansible/roles/role_under_test/.ansible-lint /etc/ansible/roles/role_under_test/ || true'
  - 'docker exec --tty "$(cat ${container_id})" env TERM=xterm yamllint -c /etc/ansible/roles/role_under_test/.yamllint /etc/ansible/roles/role_under_test/ || true'

  # Install requirements, Uncomment if needed
  #- 'docker exec "$(cat ${container_id})" env ANSIBLE_FORCE_COLOR=true ansible-galaxy install -v -r /etc/ansible/roles/role_under_test/requirements.yml'

  # Ansible syntax check.
  - 'docker exec --tty "$(cat ${container_id})" env ANSIBLE_FORCE_COLOR=true ansible-playbook /etc/ansible/roles/role_under_test/tests/test.yml --syntax-check'


  # Test role.
  - 'docker exec "$(cat ${container_id})" env ANSIBLE_FORCE_COLOR=true ansible-playbook -vvv --connection=local -i /etc/ansible/roles/role_under_test/tests/inventory /etc/ansible/roles/role_under_test/tests/test.yml'

  # Test Idempotence
  - idempotence=$(mktemp)
  - docker exec "$(cat ${container_id})" env ANSIBLE_FORCE_COLOR=true ansible-playbook -vvv --connection=local -i /etc/ansible/roles/role_under_test/tests/inventory /etc/ansible/roles/role_under_test/tests/test.yml | tee -a ${idempotence}
  - >
    tail ${idempotence}
    | grep -q 'changed=0.*failed=0'
    && (echo 'Idempotence test: pass' && exit 0)
    || (echo 'Idempotence test: fail' && exit 1)

  # Run role test suite
# Add your own tests depending on your $ROLE
  - echo "=======> Starting output tests"
  # check that our dummy file exists. TOBEREMOVED
  - 'docker exec "$(cat ${container_id})" cat /tmp/.dummy-ansible-task'


notifications:
  webhooks: https://galaxy.ansible.com/api/v1/notifications/
